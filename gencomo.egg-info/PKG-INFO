Metadata-Version: 2.4
Name: gencomo
Version: 0.1.0
Summary: GENeral-morphology COmpartmental MOdeling for complex neuronal simulations
Home-page: https://github.com/jmrfox/gencomo
Author: Jordan Fox
Author-email: Jordan Fox <jmrfox@example.com>
License: MIT
Project-URL: Homepage, https://github.com/jmrfox/gencomo
Project-URL: Documentation, https://github.com/jmrfox/gencomo/wiki
Project-URL: Repository, https://github.com/jmrfox/gencomo.git
Project-URL: Bug Tracker, https://github.com/jmrfox/gencomo/issues
Keywords: neuroscience,simulation,compartmental-modeling,mesh,neuron
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Science/Research
Classifier: Topic :: Scientific/Engineering :: Biology
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: numpy>=1.20.0
Requires-Dist: scipy>=1.7.0
Requires-Dist: trimesh>=3.15.0
Requires-Dist: open3d>=0.15.0
Requires-Dist: meshio>=5.0.0
Requires-Dist: scikit-image>=0.19.0
Requires-Dist: opencv-python>=4.5.0
Requires-Dist: networkx>=2.6
Requires-Dist: numba>=0.56.0
Requires-Dist: matplotlib>=3.5.0
Requires-Dist: plotly>=5.0.0
Requires-Dist: tqdm>=4.62.0
Requires-Dist: pyyaml>=6.0
Requires-Dist: h5py>=3.6.0
Requires-Dist: ipykernel>=6.29.5
Requires-Dist: jupyter>=1.1.1
Requires-Dist: pytest>=8.3.5
Provides-Extra: dev
Requires-Dist: pytest>=6.0; extra == "dev"
Requires-Dist: pytest-cov; extra == "dev"
Requires-Dist: black; extra == "dev"
Requires-Dist: flake8; extra == "dev"
Requires-Dist: mypy; extra == "dev"
Requires-Dist: sphinx; extra == "dev"
Requires-Dist: sphinx-rtd-theme; extra == "dev"
Dynamic: author
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-python

# GenCoMo: GENeral-morphology COmpartmental MOdeling

[![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

GenCoMo is a Python package for compartmental simulation of neurons with complex morphologies using mesh-based geometric approaches. Unlike traditional neuron simulation software that relies on simplified cylinder-based models (like NEURON's SWC format), GenCoMo works directly with detailed neuronal mesh geometries to create more accurate compartmental models.

## Key Features

- **Mesh-based compartmentalization**: Work directly with neuronal meshes instead of simplified cylinder models
- **Z-axis slicing**: Automatically slice complex morphologies along the z-axis 
- **Region detection**: Identify closed regions within each slice for compartment generation
- **Graph construction**: Build connectivity between compartments across adjacent z-levels
- **Biophysical simulation**: Solve coupled ODEs for membrane potential using Hodgkin-Huxley dynamics
- **Flexible stimulation**: Support for complex stimulation protocols
- **Analysis tools**: Built-in analysis for spike detection, propagation velocity, and more

## Installation

### From source

```bash
git clone https://github.com/jmrfox/gencomo.git
cd gencomo
pip install -e .
```

### Dependencies

GenCoMo requires several scientific computing packages:

```bash
pip install -r requirements.txt
```

Key dependencies include:
- `numpy`, `scipy` - numerical computing
- `trimesh`, `open3d` - mesh processing  
- `scikit-image`, `opencv-python` - image processing for cross-sections
- `networkx` - graph algorithms for connectivity
- `matplotlib`, `plotly` - visualization (optional)

## Quick Start

### Basic Usage

```python
import numpy as np
from gencomo import MeshProcessor, ZAxisSlicer, RegionDetector, GraphBuilder, Neuron, Simulator

# 1. Load and process a neuronal mesh
mesh_processor = MeshProcessor()
mesh = mesh_processor.load_mesh("path/to/neuron.stl")
mesh_processor.center_mesh()
mesh_processor.align_with_z_axis()

# 2. Slice the mesh along z-axis
slicer = ZAxisSlicer(mesh)
slices = slicer.create_slices(num_slices=50)

# 3. Detect closed regions in each slice
region_detector = RegionDetector()
regions = region_detector.detect_regions(slices, min_area=1.0)

# 4. Build compartment connectivity graph
graph_builder = GraphBuilder()
compartment_graph = graph_builder.build_compartment_graph(regions)

# 5. Create neuron model
neuron = Neuron("my_neuron")
neuron.set_mesh(mesh)
neuron.compartment_graph = compartment_graph

# 6. Set up and run simulation
simulator = Simulator(neuron)
simulator.set_biophysics(
    capacitance=1.0,      # ¬µF/cm¬≤
    na_conductance=0.12,  # S/cm¬≤
    k_conductance=0.036   # S/cm¬≤
)

# Add stimulus
compartment_ids = list(neuron.compartment_graph.compartments.keys())
simulator.add_stimulus(
    compartment_id=compartment_ids[0],
    start_time=10.0,  # ms
    duration=1.0,     # ms  
    amplitude=5.0     # nA
)

# Run simulation
results = simulator.run_simulation(duration=100.0, dt=0.025)

if results.success:
    print("Simulation completed!")
    analysis = simulator.analyze_results()
    print(f"Total spikes: {analysis['overall']['total_spikes']}")
```

### Command Line Interface

GenCoMo also provides a command-line interface:

```bash
# Process a mesh file
gencomo process neuron.stl -o model.npz --num-slices 50

# Run simulation  
gencomo simulate model.npz -o results.npz --duration 100 --stimulus comp_0 10 1 5

# Analyze results
gencomo analyze results.npz --plot
```

## Examples

See the `examples/` directory for detailed usage examples:

- `basic_example.py` - Complete workflow with a simple test mesh
- `advanced_example.py` - Advanced features with real neuronal meshes

Run examples:
```bash
cd examples
python basic_example.py
python advanced_example.py
```

## Documentation

### Core Concepts

**Mesh Processing**: GenCoMo starts with a 3D mesh representing the neuronal membrane. The mesh is preprocessed (centered, aligned, smoothed) before analysis.

**Z-axis Slicing**: The mesh is sliced along the z-axis at regular intervals to create 2D cross-sections. Each slice contains contours representing the neuronal boundary.

**Region Detection**: Within each slice, closed regions are identified. These regions become the basis for compartments in the model.

**Graph Construction**: Connections between regions in adjacent z-levels are established based on geometric overlap or proximity.

**Compartmental Modeling**: Each region becomes a compartment with membrane area, volume, and biophysical properties. The system of coupled ODEs is solved for membrane potential dynamics.

### API Reference

#### Core Classes

- `Neuron` - Main neuron model container
- `Compartment` - Individual compartment with geometry and biophysics  
- `CompartmentGraph` - Graph of compartment connectivity
- `MeshProcessor` - Mesh loading and preprocessing
- `ZAxisSlicer` - Mesh slicing along z-axis
- `RegionDetector` - Closed region detection in slices
- `GraphBuilder` - Compartment connectivity construction
- `ODESystem` - ODE system for biophysical simulation
- `Simulator` - High-level simulation interface

#### Key Parameters

**Slicing Parameters**:
- `num_slices` or `slice_spacing` - Resolution of z-axis discretization
- `z_min`, `z_max` - Range for slicing

**Region Detection**:
- `min_area` - Minimum area threshold for valid regions
- `hole_detection` - Whether to detect holes within regions

**Connectivity**:
- `connection_method` - 'overlap', 'distance', or 'hybrid'
- `min_overlap_ratio` - Minimum overlap for connections
- `max_connection_distance` - Maximum distance for connections

**Biophysics**:
- `capacitance` - Membrane capacitance (¬µF/cm¬≤)
- `na_conductance`, `k_conductance` - Ionic conductances (S/cm¬≤)
- `temperature` - Temperature for rate constants (¬∞C)

## Testing

Run the test suite:

```bash
pytest tests/
```

## Contributing

Contributions are welcome! Please see [CONTRIBUTING.md](CONTRIBUTING.md) for guidelines.

### Development Setup

```bash
git clone https://github.com/jmrfox/gencomo.git
cd gencomo
pip install -e ".[dev]"
```

### Code Style

We use `black` for code formatting and `flake8` for linting:

```bash
black gencomo/
flake8 gencomo/
```

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## Citation

If you use GenCoMo in your research, please cite:

```bibtex
@software{gencomo,
  title={GenCoMo: GENeral-morphology COmpartmental MOdeling},
  author={Fox, Jordan},
  year={2025},
  url={https://github.com/jmrfox/gencomo}
}
```

## Comparison with Other Tools

| Feature               | GenCoMo | NEURON | Brian2 | Arbor |
| --------------------- | ------- | ------ | ------ | ----- |
| Mesh-based morphology | ‚úÖ       | ‚ùå      | ‚ùå      | ‚ùå     |
| SWC support           | üî≤       | ‚úÖ      | ‚úÖ      | ‚úÖ     |
| Complex geometry      | ‚úÖ       | ‚ö†Ô∏è      | ‚ö†Ô∏è      | ‚ö†Ô∏è     |
| Python native         | ‚úÖ       | ‚ö†Ô∏è      | ‚úÖ      | ‚ö†Ô∏è     |
| GPU acceleration      | üî≤       | ‚ùå      | ‚ö†Ô∏è      | ‚úÖ     |

‚úÖ Full support, ‚ö†Ô∏è Partial support, ‚ùå Not supported, üî≤ Planned

## Acknowledgments

- Inspired by compartmental modeling approaches in NEURON and Brian2
- Mesh processing powered by trimesh and Open3D
- Scientific computing with NumPy, SciPy, and NetworkX

## Support

- **Documentation**: [GitHub Wiki](https://github.com/jmrfox/gencomo/wiki)
- **Issues**: [GitHub Issues](https://github.com/jmrfox/gencomo/issues)
- **Discussions**: [GitHub Discussions](https://github.com/jmrfox/gencomo/discussions)
